/**
 * AIOZ-AI-PLATFORM API
 * API for AIOZ AI Platform
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { RequestCalculateCostToVerifyAiModelRequest } from '../model/requestCalculateCostToVerifyAiModelRequest';
import { RequestCheckValidToVerifyAiModelRequest } from '../model/requestCheckValidToVerifyAiModelRequest';
import { RequestVerifyAiModelRequest } from '../model/requestVerifyAiModelRequest';
import { ResponseCheckValidToVerifyAiModelResponse } from '../model/responseCheckValidToVerifyAiModelResponse';
import { ResponseEstimateCostResponse } from '../model/responseEstimateCostResponse';
import { ResponseModelVersioningGroupLiteListResponse } from '../model/responseModelVersioningGroupLiteListResponse';
import { ResponseModelVersioningResponse } from '../model/responseModelVersioningResponse';
import { ResponseQueueTaskResponse } from '../model/responseQueueTaskResponse';
import { ResponseVerifyAiModelResponse } from '../model/responseVerifyAiModelResponse';
import { Authentication, Interceptor } from '../model/models';
import { ApiKeyAuth } from '../model/models';
export declare enum ApiKeyModelVerifyApiApiKeys {
    BearerAuth = 0
}
export declare class ApiKeyModelVerifyApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        BearerAuth: ApiKeyAuth;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ApiKeyModelVerifyApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Check Valid Source code To Verify Ai Model By Api Key
     * @param id Model\&#39;s id
     * @param input Verify Ai Model Request
     * @param xApiKey api-key
     */
    apiKeyModelIdPreVerifyPost(id: string, input: RequestCheckValidToVerifyAiModelRequest, xApiKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseCheckValidToVerifyAiModelResponse;
    }>;
    /**
     *
     * @summary Calculate Cost To Verify Ai Model By Api Key
     * @param id Model\&#39;s id
     * @param input Verify Ai Model Request
     * @param xApiKey api-key
     */
    apiKeyModelIdVerifyCostPost(id: string, input: RequestCalculateCostToVerifyAiModelRequest, xApiKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseEstimateCostResponse;
    }>;
    /**
     * valid platform is [window, linux, macApple, macIntel]
     * @summary Verify Ai Model By Api Key
     * @param id Model\&#39;s id
     * @param input Verify Ai Model Request
     * @param xApiKey api-key
     */
    apiKeyModelIdVerifyPost(id: string, input: RequestVerifyAiModelRequest, xApiKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseVerifyAiModelResponse;
    }>;
    /**
     * verifyStatus is one of rejected, verified, pending
     * @summary Get List Verify Model Task By Commit Hash And Status
     * @param id Model\&#39;s id
     * @param commitHash
     * @param xApiKey api-key
     * @param verifyStatus
     */
    apiKeyModelIdVerifyTaskGet(id: string, commitHash: string, xApiKey?: string, verifyStatus?: 'rejected' | 'verified' | 'pending', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseModelVersioningGroupLiteListResponse;
    }>;
    /**
     *
     * @summary Get Model Versioning By Hub Task Id By Api Key
     * @param id Hub Task\&#39;s id
     * @param xApiKey api-key
     */
    apiKeyModelVerifyHubTaskIdGet(id: string, xApiKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseModelVersioningResponse;
    }>;
    /**
     *
     * @summary Get Verify Platform Task By Id By Api Key
     * @param id Task\&#39;s Id
     * @param xApiKey api-key
     */
    apiKeyModelVerifyPlatformTaskIdGet(id: string, xApiKey?: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ResponseQueueTaskResponse;
    }>;
}
