"use strict";
/**
 * AIOZ-AI-PLATFORM API
 * API for AIOZ AI Platform
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKeyRepositoryApi = exports.ApiKeyRepositoryApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'http://localhost/api/v1';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ApiKeyRepositoryApiApiKeys;
(function (ApiKeyRepositoryApiApiKeys) {
    ApiKeyRepositoryApiApiKeys[ApiKeyRepositoryApiApiKeys["BearerAuth"] = 0] = "BearerAuth";
})(ApiKeyRepositoryApiApiKeys || (exports.ApiKeyRepositoryApiApiKeys = ApiKeyRepositoryApiApiKeys = {}));
class ApiKeyRepositoryApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'BearerAuth': new models_2.ApiKeyAuth('header', 'Authorization'),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ApiKeyRepositoryApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     *
     * @summary Get commit history by repository name and branch name by api key
     * @param ownerUsername repository\&#39;s owner
     * @param repositoryName repository\&#39;s name
     * @param sha Sha is the sha of the commit (optional)
     * @param xApiKey api-key
     * @param page Page is the page number (default: 1) (optional)
     * @param pageSize PageSize is the page size (default: 10) (optional)
     * @param path Path is the path of the file (optional)
     * @param repoType
     */
    async apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet(ownerUsername, repositoryName, sha, xApiKey, page, pageSize, path, repoType, options = { headers: {} }) {
        const localVarPath = this.basePath + '/api-key/repository/{ownerUsername}/{repositoryName}/commit/history'
            .replace('{' + 'ownerUsername' + '}', encodeURIComponent(String(ownerUsername)))
            .replace('{' + 'repositoryName' + '}', encodeURIComponent(String(repositoryName)));
        let localVarQueryParameters = {};
        let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        }
        else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams = {};
        // verify required parameter 'ownerUsername' is not null or undefined
        if (ownerUsername === null || ownerUsername === undefined) {
            throw new Error('Required parameter ownerUsername was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }
        // verify required parameter 'repositoryName' is not null or undefined
        if (repositoryName === null || repositoryName === undefined) {
            throw new Error('Required parameter repositoryName was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }
        // verify required parameter 'sha' is not null or undefined
        if (sha === null || sha === undefined) {
            throw new Error('Required parameter sha was null or undefined when calling apiKeyRepositoryOwnerUsernameRepositoryNameCommitHistoryGet.');
        }
        if (page !== undefined) {
            localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
        }
        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = models_1.ObjectSerializer.serialize(pageSize, "number");
        }
        if (path !== undefined) {
            localVarQueryParameters['path'] = models_1.ObjectSerializer.serialize(path, "string");
        }
        if (repoType !== undefined) {
            localVarQueryParameters['repoType'] = models_1.ObjectSerializer.serialize(repoType, "string");
        }
        if (sha !== undefined) {
            localVarQueryParameters['sha'] = models_1.ObjectSerializer.serialize(sha, "string");
        }
        localVarHeaderParams['x-api-key'] = models_1.ObjectSerializer.serialize(xApiKey, "string");
        Object.assign(localVarHeaderParams, options.headers);
        let localVarUseFormData = false;
        let localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }
        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    localVarRequestOptions.formData = localVarFormParams;
                }
                else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise((resolve, reject) => {
                (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "ResponseGetCommitHistoryResponse");
                            resolve({ response: response, body: body });
                        }
                        else {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
exports.ApiKeyRepositoryApi = ApiKeyRepositoryApi;
